#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: OpenWrt Lienol

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      routerip:
        description: 'Default OpenWrt router IP'
        required: false
        default: '10.0.0.2'

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: main
  WORKING_DIR: openwrt
  FEEDS_CONF: feeds/feeds.conf.Lienol
  CONFIG_FILE: configs/Lienol.feeds.conf
  SETUP_PACKAGES: scripts/Lienol/packages.sh
  SETUP_CONFIG: scripts/Lienol/config.sh
  UPLOAD_BIN_DIR: false
  COMPILE_FIRMWARE: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  RELEASE_NAME: Lienol
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs g++-multilib gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler git-core antlr3 gperf wget curl swig rsync ccache xsltproc rename
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Initialization custom environment
        run: |
          echo "BUILD_DATE=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
          echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Clone source code
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH $WORKING_DIR

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && cat $FEEDS_CONF >> $WORKING_DIR/feeds.conf.default
          chmod +x $SETUP_PACKAGES
          cd $WORKING_DIR
          $GITHUB_WORKSPACE/$SETUP_PACKAGES

      - name: Update & Install Feeds
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files $WORKING_DIR/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $WORKING_DIR/.config
          chmod +x $SETUP_CONFIG
          cd $WORKING_DIR
          sed -i 's|192.168.1.1|${{ github.event.inputs.routerip }}|g' package/base-files/files/bin/config_generate
          $GITHUB_WORKSPACE/$SETUP_CONFIG

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd $WORKING_DIR
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        if: env.COMPILE_FIRMWARE == 'true' && !cancelled()
        run: |
          cd $WORKING_DIR
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.BUILD_DATE }}
          path: ${{ env.WORKING_DIR }}/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd $WORKING_DIR/bin/targets/*/*
          rm -rf packages
          cp $GITHUB_WORKSPACE/$WORKING_DIR/.config $PWD/complie.config
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          cd $PWD
          for i in `ls *squashfs*.*`; do mv -f "$i" `echo "$i" | sed -e "s|^[^.]*|$RELEASE_NAME-$VERSION|g"`; done

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          touch $GITHUB_WORKSPACE/release.txt
          ACTION_LOG=$(git log --pretty=format:"- %s" --after="$(date -d '7 days ago' '+%Y-%m-%d %H:%M:%S')")
          if [ -n "$ACTION_LOG" ]; then
            echo "### Changelog ([Actions](https://github.com/$GITHUB_REPOSITORY))" >> $GITHUB_WORKSPACE/release.txt
            git log --pretty=format:"- %s" --after="$(date -d '7 days ago' '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_WORKSPACE/release.txt
            echo "<br>" >> $GITHUB_WORKSPACE/release.txt
            echo "" >> $GITHUB_WORKSPACE/release.txt
          fi
          cd $WORKING_DIR
          echo "### Changelog ([Source Code]($REPO_URL))" >> $GITHUB_WORKSPACE/release.txt
          git log --pretty=format:"- %s" --after="$(date -d '7 days ago' '+%Y-%m-%d %H:%M:%S')" | sed -e 's|#[0-9]*|[&]('"$REPO_URL"'/pull///&)|g' | sed -e 's|///#|/|g' >> $GITHUB_WORKSPACE/release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 30
          keep_minimum_runs: 20
